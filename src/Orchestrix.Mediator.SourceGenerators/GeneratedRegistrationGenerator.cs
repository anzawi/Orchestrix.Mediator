using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Orchestrix.Mediator.SourceGenerators;

    public static class GeneratedRegistrationGenerator
{
    public static string Generate(IReadOnlyCollection<RequestHandlerTarget> targets)
    {
        var builder = new StringBuilder();

        builder.AppendLine("""
                           // <auto-generated/>
                           #nullable enable
                           using global::Microsoft.Extensions.DependencyInjection;

                           namespace Orchestrix.Mediator.Generated;

                           [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                           internal static class GeneratedRegistration
                           {
                               public static void AddGeneratedOrchestrixHandlers(this IServiceCollection services)
                               {
                           """);

        foreach (var target in targets
                     .GroupBy(t => (t.RequestType, t.ResponseType, t.HandlerType, t.Kind))
                     .Select(g => g.First()))
        {
            var impl = target.HandlerType;

            var iface = target.Kind switch
            {
                "GenericRequest" => $"global::Orchestrix.Mediator.IRequestHandler<{target.RequestType}, {target.ResponseType}>",
                "VoidRequest" => $"global::Orchestrix.Mediator.IRequestHandler<{target.RequestType}>",
                "Notification" => $"global::Orchestrix.Mediator.INotificationHandler<{target.RequestType}>",
                "ParallelNotification" => $"global::Orchestrix.Mediator.IParallelNotificationHandler<{target.RequestType}>",
                "StreamRequest" => $"global::Orchestrix.Mediator.IStreamRequestHandler<{target.RequestType}, {target.ResponseType}>",
                _ => null
            };

            if (iface is not null && impl is not null)
            {
                builder.AppendLine($"        services.AddScoped<{iface}, {impl}>();");
            }
        }

        builder.AppendLine("""
                               }
                           }
                           """);

        return builder.ToString();
    }
}
