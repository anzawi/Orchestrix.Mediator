using Microsoft.Extensions.DependencyInjection;

namespace Orchestrix.Mediator.Core.Execution;

/// <summary>
/// Defines the contract for invoking a stream handler for processing stream requests.
/// </summary>
/// <typeparam name="TResponse">The type of the response objects produced by the stream.</typeparam>
internal interface IStreamHandlerInvoker<out TResponse>
{
    /// <summary>
    /// Invokes the stream handler for the provided request and returns an asynchronous enumerable of responses.
    /// </summary>
    /// <param name="provider">
    /// The service provider used to resolve the handler instance for the given request type.
    /// </param>
    /// <param name="request">
    /// The request object to be processed by the stream handler.
    /// </param>
    /// <param name="ct">
    /// The cancellation token used to propagate notification that the operation should be canceled.
    /// </param>
    /// <returns>
    /// An <see cref="IAsyncEnumerable{T}"/> of responses generated by the stream handler for the provided request.
    /// </returns>
    IAsyncEnumerable<TResponse> Invoke(IServiceProvider provider, object request, CancellationToken ct);
}

/// <inheritdoc />
internal sealed class StreamHandlerInvokerWrapper<TRequest, TResponse> : IStreamHandlerInvoker<TResponse>
    where TRequest : IStreamRequest<TResponse>
{
    /// <inheritdoc />
    public IAsyncEnumerable<TResponse> Invoke(IServiceProvider provider, object request, CancellationToken ct)
    {
        var handler = provider.GetRequiredService<IStreamRequestHandler<TRequest, TResponse>>();
        return handler.Handle((TRequest)request, ct);
    }
}